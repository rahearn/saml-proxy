# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "production"

stages:
  - build
  - test
  - deploy

variables:
  POSTGRES_DB: saml_proxy_test
  POSTGRES_PASSWORD: not-actually-secret
  POSTGRES_VERSION: 15
  RUBY_VERSION: 3.3.6

include:
  - local: ".gitlab/ruby.yml"
  - local: ".gitlab/rails.yml"
  - local: ".gitlab/terraform.yml"

default:
  image: "ruby:${RUBY_VERSION}"
  before_script:
    - !reference [.setup-ruby]
  cache:
    - !reference [.cache-dependencies, cache]

build-project:
  stage: build
  extends: [.cache-dependencies, .setup-languages]
  cache:
    policy: pull-push
  script:
    - !reference [.bundle-install]
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

brakeman-scan:
  stage: test
  script:
    - bin/brakeman --no-pager --ensure-ignore-notes -f sarif -o output.sarif.json
  artifacts:
    when: always
    expose_as: "Brakeman results"
    paths:
      - output.sarif.json

dependency_scanning:
  stage: test
  extends: .setup-languages
  script:
    - bin/rake bundler:audit
    - gem install cyclonedx-ruby
    - cyclonedx-ruby -p . -o ruby_bom.xml
  artifacts:
    expose_as: "Ruby SBOM"
    paths:
      - ruby_bom.xml

rspec:
  stage: test
  extends: .setup-project
  script:
    - bundle exec rspec
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

owasp_scan:
  extends: .owasp:setup
  script:
    - /zap/zap-baseline.py -t http://localhost:3000 -c zap.conf -I -r zap_report.html
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

owasp_daily_scan:
  extends: .owasp:setup
  script:
    - /zap/zap-full-scan.py -t http://localhost:3000 -c zap.conf -I -r zap_report.html
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

terraform:fmt:
  stage: test
  extends: .terraform:setup
  script:
    - terraform fmt -check -recursive .

terraform:validate:
  stage: test
  extends: .terraform:setup
  script:
    - terraform validate

terraform:plan:staging:
  extends:
    - .terraform:setup
    - .terraform:variables:staging
  script:
    - apk add zip
    - terraform plan -out=staging_plan.out -var-file=staging.tfvars -var rails_master_key=$RAILS_MASTER_KEY -var cf_user=$CF_USERNAME
  artifacts:
    paths:
      - terraform/staging_plan.out
      - terraform/dist

terraform:apply:staging:
  extends:
    - .terraform:setup
    - .terraform:variables:staging
  dependencies: null
  needs:
    - terraform:plan:staging
  script:
    - apk add zip
    - terraform apply -var-file=staging.tfvars -var rails_master_key=$RAILS_MASTER_KEY -var cf_user=$CF_USERNAME staging_plan.out
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

terraform:plan:production:
  extends:
    - .terraform:setup
    - .terraform:variables:production
  script:
    - apk add zip
    - terraform plan -out=production_plan.out -var-file=production.tfvars -var rails_master_key=$PRODUCTION_RAILS_MASTER_KEY -var cf_user=$CF_USERNAME
  artifacts:
    paths:
      - terraform/production_plan.out
      - terraform/dist

terraform:apply:production:
  extends:
    - .terraform:setup
    - .terraform:variables:production
  dependencies: null
  needs:
    - terraform:plan:production
  script:
    - apk add zip
    - terraform apply -var-file=production.tfvars -var rails_master_key=$PRODUCTION_RAILS_MASTER_KEY -var cf_user=$CF_USERNAME production_plan.out
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "production"
      when: manual
